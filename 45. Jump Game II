45. Jump Game II


Greedy Approach:

class Solution {
    public int jump(int[] ar) {
        int c=0,d=0,end=0;
       
     for(int i=0;i<ar.length-1;i++)
    {
       c=Math.max(c,i+ar[i]);
       if(i==end)
       {
        d++;
        end=c;
       }
    }
    return d;
}}
bfs :
class Solution {
    public int jump(int[] ar) {
        int n=ar.length;
        if(n<=1)return 0;
        Queue<Integer> queue=new LinkedList<>();
        queue.add(0);
        int ce=0;
        int f=0,d=0;
        while(!queue.isEmpty())
        {
            int c=queue.poll();
             f=Math.max(f,ar[c]+c);
             if(c==ce)
            {
                ce=f;
            
            if(c>=n-1)
             return d;
               d++;
            for(int i=c+1;i<=Math.min(f,n-1);i++)
              queue.add(i);
            }
        }
        return d;
    }
}
